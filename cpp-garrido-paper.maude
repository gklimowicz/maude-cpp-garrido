--- TODO Cleanup to check:
---   - "[.] eq " or "[.] ceq" should have a line break.
---   - [^ ][.] needs space before the [.].
---   - [:] with no spaces between variable names and type.

--- TODO Then attempt to load and find additional errors.



--- ------------- ---
--- SYNTAX OF CPP ---
--- ------------- ---
fmod IDENTIFIER is
  pr QID .
  sort Identifier IdentifierList IdentifierListP .
  subsorts Qid < Identifier < IdentifierList .
  op `(`) : -> IdentifierListP .
  op `(_`) : IdentifierList -> IdentifierListP .
  op _,_ : IdentifierList IdentifierList -> IdentifierList [assoc] .
  op size : IdentifierListP -> Nat .
  op _in_ : Identifier IdentifierListP -> Bool .
  op pos : Identifier IdentifierListP -> Nat .
  op elemAt : Nat IdentifierListP -> Identifier .
  op cons : Identifier IdentifierListP -> IdentifierListP .
  vars I I' : Identifier . var IL : IdentifierList . var N : Nat .
  var ILP : IdentifierListP .
  eq size(()) = 0 .
  eq size((I, IL)) = 1 + size((IL)) .
  eq size((I)) = 1 .
  eq I in () = false .
  eq I in (I', IL) = (I == I') or (I in (IL)) .
  eq I in (I') = (I == I') .
  eq pos(I, ()) = 0 .
  ceq pos(I, (I', IL)) = 1 if (I == I') .
  ceq pos(I, (I', IL)) = 1 + pos(I, (IL)) if (I =/= I') and (I in (IL)) .
  ceq pos(I,(I')) = 1 if (I == I') .
  eq pos(I, (IL)) = 0 [owise] .
  eq elemAt(1, (I, IL)) = I .
  eq elemAt(s(N), (I, IL)) = elemAt(N, (IL)) .
  eq elemAt(1, (I)) = I .
  eq cons(I,()) = (I) .
  eq cons(I,(IL)) = (I,IL) .
endfm

fmod TOKEN is
  pr IDENTIFIER .
  sorts Token TokenSequence .
  subsort Identifier < Token < TokenSequence .
  op nil : -> TokenSequence .
  op __ : TokenSequence TokenSequence -> TokenSequence [assoc id: nil] .
  op _inTS_ : Token TokenSequence -> Bool .
  vars T T' : Token . var TS : TokenSequence .
  eq T inTS nil = false .
  eq T inTS (T' TS) = (T == T') or (T inTS TS) .
endfm

fmod COND-EXP-SYNTAX is
  pr TOKEN . pr INT .
  sort CondExp .
  subsort Identifier < CondExp .
  op e : Int -> CondExp .
endfm


fmod DEF-COND-SYNTAX is ex COND-EXP-SYNTAX .
  op defined_ : Identifier -> CondExp .
endfm


fmod ARITH-EXP-SYNTAX is ex COND-EXP-SYNTAX .
  op _+_ : CondExp CondExp -> CondExp [prec 40 gather(e E)] .
  op _-_ : CondExp CondExp -> CondExp [prec 40 gather(e E)] .
  op _*_ : CondExp CondExp -> CondExp [prec 35 gather(e E)] .
  op _/_ : CondExp CondExp -> CondExp [prec 35 gather(e E)] .
  op _%_ : CondExp CondExp -> CondExp [prec 35 gather(e E)] .
endfm

fmod BIT-EXP-SYNTAX is ex COND-EXP-SYNTAX .
  op _<<_ : CondExp CondExp -> CondExp [prec 42] .
  op _>>_ : CondExp CondExp -> CondExp [prec 42] .
  op _&_ : CondExp CondExp -> CondExp [prec 46] .
  op _^_ : CondExp CondExp -> CondExp [prec 46] .
  op _|_ : CondExp CondExp -> CondExp [prec 46] .
endfm


fmod REXP-SYNTAX is ex COND-EXP-SYNTAX .
  op _<_ : CondExp CondExp -> CondExp [prec 44] .
  op _<=_ : CondExp CondExp -> CondExp [prec 44] .
  op _>_ : CondExp CondExp -> CondExp [prec 44] .
  op _>=_ : CondExp CondExp -> CondExp [prec 44] .
  op _==_ : CondExp CondExp -> CondExp [prec 45] .
  op _!=_ : CondExp CondExp -> CondExp [prec 45] .
endfm


fmod BEXP-SYNTAX is ex COND-EXP-SYNTAX .
  op !_ : CondExp -> CondExp [prec 30] .
  op _&&_ : CondExp CondExp -> CondExp [prec 49] .
  op _||_ : CondExp CondExp -> CondExp [prec 51] .
endfm


fmod CEXP-SYNTAX is ex COND-EXP-SYNTAX .
  op _?_:_ : CondExp CondExp CondExp -> CondExp [prec 55] .
endfm


fmod ALL-COND-EXP-SYNTAX is pr COND-EXP-SYNTAX .
  pr DEF-COND-SYNTAX .
  pr ARITH-EXP-SYNTAX .
  pr BIT-EXP-SYNTAX . pr REXP-SYNTAX .
  pr BEXP-SYNTAX .
  pr CEXP-SYNTAX .
endfm


fmod CPP-DIR-SYNTAX is
  sort CppDirective .
endfm


fmod DEFINE-SYNTAX is ex CPP-DIR-SYNTAX .
  pr TOKEN .
  sorts MacroDefDir MacroUndefDir .
  subsort MacroDefDir MacroUndefDir < CppDirective .
  op #define__cr : Identifier TokenSequence -> MacroDefDir .
  op #define___cr : Identifier IdentifierListP TokenSequence -> MacroDefDir .
  op #undef_cr : Identifier -> MacroUndefDir .
endfm


fmod INCLUDE-SYNTAX is ex CPP-DIR-SYNTAX . pr IDENTIFIER .
  sorts IncludeDir FileName .
  subsort IncludeDir < CppDirective .
  op #include_cr : String -> IncludeDir .
  op #include_cr : Identifier -> IncludeDir .
endfm


fmod COND-DIR-SYNTAX is ex CPP-DIR-SYNTAX .
  pr TOKEN .
  pr ALL-COND-EXP-SYNTAX .
  sort CondDir .
  subsort CondDir < CppDirective .
  op #if_cr : TokenSequence -> CondDir .
  op #ifdef_cr : Identifier -> CondDir .
  op #ifndef_cr : Identifier -> CondDir .
  op #elif_cr : TokenSequence -> CondDir .
  op #else`cr : -> CondDir .
  op #endif`cr : -> CondDir .
endfm


fmod LINE-SEQ-SYNTAX is
  pr CPP-DIR-SYNTAX .
  pr TOKEN .
  sorts Line LineSeq .
  subsorts CppDirective < Line .
  op _cr : TokenSequence -> Line .
  op nilLS : -> LineSeq [ctor] .
  op __ : Line LineSeq -> LineSeq [ctor] .
  op _++_ : LineSeq LineSeq -> LineSeq .
  op _inLS_ : LineSeq LineSeq -> Bool .
  op _consecInLS_ : LineSeq LineSeq -> Bool .
  vars L L' : Line . vars LS1 LS2 : LineSeq .
  eq nilLS ++ LS2 = LS2 .
  eq (L LS1) ++ LS2 = L (LS1 ++ LS2) .
  eq nilLS inLS LS2 = true .
  eq L LS1 inLS nilLS = false .
  eq L LS1 inLS L LS2 = LS1 consecInLS LS2 .
  ceq L LS1 inLS L' LS2 = L LS1 inLS LS2 if L =/= L' .
  eq nilLS consecInLS LS2 = true .
  eq L LS1 consecInLS nilLS = false .
  eq L LS1 consecInLS L LS2 = LS1 consecInLS LS2 .
  eq L LS1 consecInLS L' LS2 = false .
endfm


fmod CPP-SYNTAX is
  pr ALL-COND-EXP-SYNTAX .
  pr DEFINE-SYNTAX .
  pr INCLUDE-SYNTAX .
  pr COND-DIR-SYNTAX .
  pr LINE-SEQ-SYNTAX .
endfm


--- ---------------- ---
--- SEMANTICS OF CPP ---
--- ---------------- ---
fmod TOKEN-TO-ARG is pr TOKEN .
  sort TokenSeqList .
  subsort TokenSequence < TokenSeqList .
  op nilTSL : -> TokenSeqList .
  op _;_ : TokenSeqList TokenSeqList -> TokenSeqList [assoc id: nilTSL] .
  op size : TokenSeqList -> Nat .
  op elemAtTS : Nat TokenSeqList -> TokenSequence .
  op toTokenSeqList : TokenSequence -> TokenSeqList .
  var T : Token . vars TS1 TS2 TSA : TokenSequence .
  var TSL : TokenSeqList . var N : Nat .
  eq size(nilTSL) = 0 .
  eq size(TS1 ; TSL) = 1 + size(TSL) .
  eq elemAtTS(1, (TS1 ; TSL)) = TS1 .
  eq elemAtTS(s(N), (TS1 ; TSL)) = elemAtTS(N, TSL) .
  ceq toTokenSeqList(TS1) = TS1 if not ('`, inTS TS1) .
  ceq toTokenSeqList(TS1 '`, TS2) = TS1 ; toTokenSeqList(TS2)
    if not ('`, inTS TS1) and ('`, inTS TS2) .
  ceq toTokenSeqList(TS1 '`, TS2) = TS1 ; TS2
    if not ('`, inTS TS1) and not ('`, inTS TS2) .
endfm


fmod MACRO-DEF is
  pr TOKEN . pr STRING . pr TOKEN-TO-ARG .
  sort MacroDef .
  op name_replText_ : Identifier TokenSequence -> MacroDef .
  op name_params_replText_ : Identifier IdentifierListP TokenSequence -> MacroDef .
  op name : MacroDef -> Identifier .
  op hasArgs : MacroDef -> Bool .
  op expand : MacroDef -> TokenSequence .
  op expandWithArgs : MacroDef TokenSeqList -> TokenSequence .
  op ex-rec : IdentifierListP TokenSequence TokenSeqList -> TokenSequence .
  op dquote : -> Qid .
  var N : Identifier . var TS : TokenSequence . vars T T2 : Token . var PL : IdentifierListP .
  eq name(name N replText TS) = N .
  eq name(name N params PL replText TS) = N .
  eq hasArgs(name N replText TS) = false .
  eq hasArgs(name N params PL replText TS) = true .
  eq expand(name N replText TS) = ex-rec(`(`), TS, nilTSL) . var TSL : TokenSeqList .
  ceq expandWithArgs(name N params PL replText TS, TSL) = nil
    if ( size(PL) =/= size(TSL) ) .
  eq expandWithArgs(name N params PL replText TS, TSL)
    = ex-rec(PL, TS, TSL) [owise] .
  eq ex-rec(PL, nil, TSL) = nil .
  eq ex-rec(PL, '# T TS, TSL) = dquote elemAtTS(pos(T, PL), TSL) dquote
                        ex-rec(PL, TS, TSL) .
  ceq ex-rec(PL, T '## T2 TS, TSL)
    = qid(string(T) + string(T2)) ex-rec(PL, TS, TSL)
    if not(T in PL) and not(T2 in PL) .
  ceq ex-rec(PL, T '## T2 TS, TSL)
    = qid(string(elemAtTS(pos(T, PL), TSL)) + string(T2)) ex-rec(PL, TS, TSL)
    if (T in PL) and not(T2 in PL) .
  ceq ex-rec(PL, T '## T2 TS, TSL)
    = qid(string(T) + string(elemAtTS(pos(T2, PL), TSL))) ex-rec(PL, TS, TSL)
    if not(T in PL) and (T2 in PL) .
    eq ex-rec(PL, T '## T2 TS, TSL) = qid(string(elemAtTS(pos(T, PL), TSL)) +
          string(elemAtTS(pos(T2, PL), TSL))) ex-rec(PL, TS, TSL) [owise] .
  ceq ex-rec(PL, T TS, TSL) = T ex-rec(PL, TS, TSL) if not(T in PL) .
  ceq ex-rec(PL, T TS, TSL) = elemAtTS(pos(T, PL), TSL) ex-rec(PL, TS, TSL)
    if (T in PL) .
endfm


fmod MACRO-TABLE is
  pr MACRO-DEF .
  sort MacroTable .
  op empty : -> MacroTable .
  op [_:_] : Identifier MacroDef -> MacroTable .
  op __ : MacroTable MacroTable -> MacroTable [assoc comm id: empty] . op _[_] : MacroTable Identifier -> MacroDef .
  op _[_<-_] : MacroTable Identifier MacroDef -> MacroTable . op isMacro : Identifier MacroTable -> Bool .
  op isMacroWithArgs : Identifier MacroTable -> Bool .
  op isMacroWithoutArgs : Identifier MacroTable -> Bool .
  op remove : Identifier MacroTable -> MacroTable .
  vars N N' : Identifier . vars M M' : MacroDef . var MT : MacroTable .
  eq ([N : M] MT)[N] = M .
  eq ([N : M'] MT)[N <- M] = [N : M] MT .
  eq MT[N <- M] = MT [N : M] [owise] .
  eq isMacro(N, empty) = false .
  eq isMacro(N, ([N' : M] MT)) = (N == N') or isMacro(N, MT) .
  eq isMacroWithArgs(N, MT) = isMacro(N, MT) and hasArgs(MT[N]) .
  eq isMacroWithoutArgs(N, MT) = isMacro(N, MT) and not hasArgs(MT[N]) .
  eq remove(N, empty) = empty .
  eq remove(N, ([N : M] MT)) = remove(N, MT) .
  ceq remove(N, ([N' : M] MT)) = [N' : M]
  remove(N, MT) if N =/= N' .
endfm


fmod COND-AUX is
  pr STRING . pr RAT . pr CONVERSION . op isNumber : String -> Bool .
  op toInt : String -> Int .
  var S : String .
  eq toInt(S) = rat(S, 10) .
endfm


fmod COND-EXP-SEMANTICS is pr COND-AUX .
  pr COND-EXP-SYNTAX . pr MACRO-TABLE .
  op evalB : CondExp MacroTable -> Bool .
  op evalA : CondExp MacroTable -> Int .
  op toCondExp : TokenSequence MacroTable -> CondExp .
  var MT : MacroTable . var X : Int . var T : Token . var AS : TokenSequence .
  ceq evalB(e(X), MT) = true if X =/= 0 .
  eq evalB(e(0), MT) = false .
  eq evalA(e(X), MT) = X .
  eq evalB(T, MT) = false .     --- T is not a macro
  eq evalA(T, MT) = 0 .      --- T is not a macro
  ceq toCondExp(T, MT) = toCondExp(expand(MT[T]), MT)
    if isMacroWithoutArgs(T, MT) .
  ceq toCondExp(T '`( AS '`), MT)
    = toCondExp(expandWithArgs(MT[T], toTokenSeqList(AS)), MT)
    if isMacroWithArgs(T, MT) .
  ceq toCondExp(T, MT) = e(toInt(string(T)))  if isNumber(string(T)) .
endfm


fmod DEF-COND-SEMANTICS is pr DEF-COND-SYNTAX .
  ex COND-EXP-SEMANTICS .
  var N : Identifier . var MT : MacroTable .
  eq evalB(defined N, MT) = isMacro(N, MT) .
  eq toCondExp('defined N, MT) = defined N .
endfm


fmod ARITH-EXP-SEMANTICS is pr ARITH-EXP-SYNTAX .
  ex COND-EXP-SEMANTICS .
  vars E E' : CondExp . var MT : MacroTable .
  eq evalA(E + E', MT) = evalA(E, MT) + evalA(E', MT) .
  eq evalA(E - E', MT) = evalA(E, MT) - evalA(E', MT) .
  eq evalA(E * E', MT) = evalA(E, MT) * evalA(E', MT) .
  eq evalA(E / E', MT) = evalA(E, MT) quo evalA(E', MT) .
  eq evalA(E % E', MT) = evalA(E, MT) rem evalA(E', MT) .
  var T : Token . var TS : TokenSequence .
  eq toCondExp(T '+ TS, MT) = toCondExp(T, MT) + toCondExp(TS, MT) .
  eq toCondExp(T '- TS, MT) = toCondExp(T, MT) - toCondExp(TS, MT) .
  eq toCondExp(T '* TS, MT) = toCondExp(T, MT) * toCondExp(TS, MT) .
  eq toCondExp(T '/ TS, MT) = toCondExp(T, MT) / toCondExp(TS, MT) .
  eq toCondExp(T '% TS, MT) = toCondExp(T, MT) % toCondExp(TS, MT) .
endfm


fmod BIT-EXP-SEMANTICS is pr BIT-EXP-SYNTAX .
  ex COND-EXP-SEMANTICS .
  vars E E' : CondExp . var MT : MacroTable .
  eq evalA(E << E', MT) = evalA(E, MT) << evalA(E', MT) .
  eq evalA(E >> E', MT) = evalA(E, MT) >> evalA(E', MT) .
  eq evalA(E & E', MT) = evalA(E, MT) & evalA(E', MT) .
  eq evalA(E ^ E', MT) = evalA(E, MT) xor evalA(E', MT) .
  eq evalA(E | E', MT) = evalA(E, MT) | evalA(E', MT) .
  var T : Token . var TS : TokenSequence .
  eq toCondExp(T '<< TS, MT) = toCondExp(T, MT) << toCondExp(TS, MT) .
endfm


fmod REXP-SEMANTICS is pr REXP-SYNTAX .
  ex COND-EXP-SEMANTICS .
  vars E E' : CondExp . var MT : MacroTable .
  eq evalB(E < E', MT) = (evalA(E, MT) < evalA(E', MT)) .
  eq evalB(E <= E', MT) = (evalA(E, MT) <= evalA(E', MT)) .
  eq evalB(E > E', MT) = (evalA(E, MT) > evalA(E', MT)) .
  eq evalB(E >= E', MT) = (evalA(E, MT) >= evalA(E', MT)) .
  eq evalB(E == E', MT) = (evalA(E, MT) == evalA(E', MT)) .
  eq evalB(E != E', MT) = (evalA(E, MT) =/= evalA(E', MT)) .
  var T : Token . vars TS1 TS2 : TokenSequence .
  eq toCondExp(T '< TS2, MT) = toCondExp(T, MT) < toCondExp(TS2, MT) .
endfm


fmod BEXP-SEMANTICS is pr BEXP-SYNTAX .
  ex COND-EXP-SEMANTICS .
  vars E E' : CondExp . var MT : MacroTable . var TS : TokenSequence .
  eq evalB(! E, MT) = not evalB(E, MT) .
  eq evalB(E && E', MT) = evalB(E, MT) and evalB(E', MT) .
  eq evalB(E || E', MT) = evalB(E, MT) or evalB(E', MT) .
  eq toCondExp('! TS, MT) = ! toCondExp(TS, MT) .
endfm


fmod CEXP-SEMANTICS is pr CEXP-SYNTAX .
  ex COND-EXP-SEMANTICS .
  vars C E E' : CondExp .  var MT : MacroTable .
  ceq evalB(C ? E : E', M  = evalB(E, MT) if evalB(C, MT) .
  ceq evalB(C ? E : E', MT) = evalB(E', MT) if not evalB(C, MT) .
endfm

fmod ALL-COND-EXP-SEMANTICS is
  pr DEF-COND-SEMANTICS .
  pr ARITH-EXP-SEMANTICS .
  pr BIT-EXP-SEMANTICS .
  pr REXP-SEMANTICS .
  pr BEXP-SEMANTICS .
  pr CEXP-SEMANTICS .
endfm


fmod SET-STRING is
  pr STRING .
  sort SetString .
  subsort String < SetString .
  op emptyS : -> SetString [ctor] .
  op __ : SetString SetString -> SetString [ctor assoc comm id: emptyS] . op _in_ : String SetString -> Bool .
  vars X X' : String . var S : SetString .
  eq X X = X .
  eq X in emptyS = false .
  eq X in (X' S) = X == X' or X in S .
endfm


fmod CFILES-MAP is
  pr SET-STRING . pr CPP-SYNTAX .
  sorts CFile CFilesMap CFilesMap? .
  subsort CFile < CFilesMap < CFilesMap? .
  op empty : -> CFilesMap [ctor] .
  op [_:_] : String LineSeq -> CFile [ctor] .
  op __ : CFilesMap? CFilesMap? -> CFilesMap? [ctor assoc comm id: empty] .
  op containsFileName : String CFilesMap? -> Bool .
  op dom : CFilesMap -> SetString .
  vars N N' : String . var LS : LineSeq .
  vars FM FM1 FM2 : CFilesMap? . var FM' : CFilesMap .
  eq containsFileName(N, empty) = false .
  eq containsFileName(N, [N' : LS] FM) = (N == N') or containsFileName(N, FM) .
  eq dom(empty) = emptyS .
  eq dom([N : LS] FM') = N dom(FM') .
  op reach : CFilesMap? SetString -> SetString .
  op includedFiles : LineSeq -> SetString .
  var S : SetString .
  eq reach(empty, S) = emptyS .
  eq reach(FM, emptyS) = emptyS .
  ceq reach(FM, N) = emptyS if not containsFileName(N, FM) .
  eq reach([N : LS] FM, N S)
    = includedFiles(LS) reach(FM, includedFiles(LS)) reach(FM, S) .
  var L : Line .
  eq includedFiles(nilLS) = emptyS .
  eq includedFiles((#include N cr) LS) = N includedFiles(LS) .
  eq includedFiles(L LS) = includedFiles(LS) [owise] .

  cmb ([N : LS] FM) : CFilesMap if FM : CFilesMap /\ (not N in dom(FM)) /\
     (not N in (includedFiles(LS) reach(FM, includedFiles(LS)))) .
endfm


fmod CPP-STATE is
  pr MACRO-TABLE . pr TOKEN . pr CFILES-MAP .
  sorts CppState CppStateAttribute .
  subsort CppStateAttribute < CppState .
  op empty : -> CppState .
  op _,_ : CppState CppState -> CppState [assoc comm id: empty] . op files : CFilesMap -> CppStateAttribute .
  op macroTbl : MacroTable -> CppStateAttribute .
  op curMacroCalls : IdentifierListP -> CppStateAttribute .
  op skip : Bool -> CppStateAttribute .
  op nestLevelOfSkipped : Nat -> CppStateAttribute .
  op branchTaken : Bool -> CppStateAttribute .
  op outputStream : TokenSequence -> CppStateAttribute .
endfm


fmod HELPING-OPS is
  pr CPP-STATE .
  op readFile : String CFilesMap -> LineSeq .
  vars F F' : String . var S : LineSeq . var FM : CFilesMap .
  eq readFile(F, empty) = nilLS .
  eq readFile(F, [F : S] FM) = S .
  ceq readFile(F, [F' : S] FM) = readFile(F, FM) if F =/= F' .
  op initialCppState : CFilesMap -> CppState .
  eq initialCppState(FM) = files(FM), macroTbl(empty),
        curMacroCalls(`(`)), skip(false), nestLevelOfSkipped(0),
        branchTaken(false), outputStream(nil) .
endfm


fmod LINE-SEQ-SEMANTICS is pr LINE-SEQ-SYNTAX .
  pr ALL-COND-EXP-SEMANTICS . pr CPP-STATE .
  op state : Line CppState -> CppState .
  op state : LineSeq CppState -> CppState .
  var L : Line . var LS : LineSeq . var S : CppState .
  var ILP : IdentifierListP . var I : Identifier . var IL : IdentifierList .
  var T : Token . vars TS AS O : TokenSequence . var MT : MacroTable .
  eq state(nil cr, S) = S .
  eq state(('## TS) cr, (curMacroCalls( (I, IL) ), skip(false), S))
    = state(TS cr, (curMacroCalls( (IL) ), skip(false), S)) .
  eq state(('## TS) cr, (curMacroCalls( (I) ), skip(false), S))
    = state(TS cr, (curMacroCalls( () ), skip(false), S)) .
  ceq state((T TS) cr, (macroTbl(MT), curMacroCalls(ILP), skip(false),
    outputStream(O), S))
    = state(TS cr, (macroTbl(MT), curMacroCalls(ILP), skip(false), outputStream(O T), S))
    if not(isMacro(T, MT)) or (T in ILP) .
  ceq state((T '`( AS '`) TS) cr, (macroTbl(MT), curMacroCalls(ILP), skip(false), S))
    = state((expandWithArgs(MT[T], toTokenSeqList(AS)) '## TS) cr,
        (macroTbl(MT), curMacroCalls(cons(T, ILP)), skip(false), S)) if isMacroWithArgs(T, MT) .
  ceq state((T TS) cr, (macroTbl(MT), curMacroCalls(ILP), skip(false), S))
    = state((expand(MT[T]) '## TS) cr,
        (macroTbl(MT), curMacroCalls(cons(T, ILP)), skip(false), S))
    if isMacroWithoutArgs(T, MT) .
  eq state((T TS) cr, (skip(true), S)) = skip(true), S .
  eq state(nilLS, S) = S .
  eq state(L LS, S) = state(LS, state(L, S)) .
endfm


fmod INCLUDE-SEMANTICS is pr INCLUDE-SYNTAX .
  ex LINE-SEQ-SEMANTICS . pr HELPING-OPS .
  var FN : String . var S : CppState .
  var FS : CFilesMap . var I : Identifier . var MT : MacroTable .
  eq state(#include FN cr, (files(FS), skip(false), S))
    = state(readFile(FN, FS), (files(FS), skip(false), S)) .
  eq state(#include FN cr, (skip(true), S))
    = skip(true), S .
  ceq state(#include I cr, (files(FS), macroTbl(MT), skip(false), S))
    = state(readFile(string(expand(MT[I])), FS),
    (files(FS), macroTbl(MT), skip(false), S))
    if isMacroWithoutArgs(I, MT) .
  eq state(#include I cr, (skip(true), S))
    = skip(true), S .
endfm


fmod DEFINE-SEMANTICS is pr DEFINE-SYNTAX .
  ex LINE-SEQ-SEMANTICS .
  var I : Identifier . var TS : TokenSequence . var MT : MacroTable .
  var S : CppState . var IdL : IdentifierList . var MDD : MacroDefDir .
  eq state(#define I TS cr, (macroTbl(MT), skip(false), S))
    = macroTbl([I : (name I replText TS)] MT), skip(false), S .
  eq state(#define I ( IdL ) TS cr, (macroTbl(MT), skip(false), S))
    = macroTbl([I : (name I params (IdL) replText TS)] MT), skip(false), S .
  eq state(MDD, (skip(true), S)) = skip(true), S .
  ceq state(#undef I cr, (macroTbl(MT), skip(false), S))
    = macroTbl(remove(I, MT)), skip(false), S if isMacro(I, MT) .
  eq state(#undef I cr, (macroTbl(MT), skip(false), S))
    = macroTbl(MT), skip(false), S [owise] .
  eq state(#undef I cr, (skip(true), S)) = skip(true), S .
endfm


fmod COND-DIR-SEMANTICS is pr COND-DIR-SYNTAX .
  ex LINE-SEQ-SEMANTICS .
  pr ALL-COND-EXP-SEMANTICS .
  var N : Nat . var B : Bool . var AMT : MacroTable .
  var S : CppState . var I : Identifier . var TS : TokenSequence .

  --- Case 1 of #if: Not skipping -> Not skipping
  ceq state(#if TS cr, (macroTbl(AMT), skip(false), branchTaken(false), S))
    = macroTbl(AMT), skip(false), branchTaken(true), S
    if evalB(toCondExp(TS, AMT), AMT) = true .
  --- Case 2 of #if: Not skipping -> Skipping
  ceq state(#if TS cr, (macroTbl(AMT), skip(false), nestLevelOfSkipped(0),
        branchTaken(false), S))
    = macroTbl(AMT), skip(true), nestLevelOfSkipped(1), branchTaken(false), S
    if evalB(toCondExp(TS, AMT), AMT) = false .
  --- Case 3 of #if: Skipping -> Skipping
  eq state(#if TS cr, (skip(true), nestLevelOfSkipped(N), branchTaken(B), S))
    = skip(true), nestLevelOfSkipped(N + 1), branchTaken(false), S .

  --- Case 1 of #ifdef: Not skipping -> Not skipping
  ceq state(#ifdef I cr, (macroTbl(AMT), skip(false), branchTaken(false), S))
    = macroTbl(AMT), skip(false), branchTaken(true), S
    if isMacro(I, AMT) .
  --- Case 2 of #ifdef: Not skipping -> Skipping
  ceq state(#ifdef I cr, (macroTbl(AMT), skip(false), nestLevelOfSkipped(0),
        branchTaken(false), S))
    = macroTbl(AMT), skip(true), nestLevelOfSkipped(1), branchTaken(false), S
    if not isMacro(I, AMT) .
  --- Case 3 of #ifdef: Skipping -> Skipping
  eq state(#ifdef I cr, (skip(true), nestLevelOfSkipped(N), branchTaken(B), S))
    = skip(true), nestLevelOfSkipped(N + 1), branchTaken(false), S .


  --- Case 1 of #ifndef: Not skipping -> Not skipping
  ceq state(#ifndef I cr, (macroTbl(AMT), skip(false), branchTaken(false), S))
    = macroTbl(AMT), skip(false), branchTaken(true), S
    if not isMacro(I, AMT) .
  --- Case 2 of #ifndef: Not skipping -> Skipping
  ceq state(#ifndef I cr, (macroTbl(AMT), skip(false), nestLevelOfSkipped(0),
        branchTaken(false), S))
    = macroTbl(AMT), skip(true), nestLevelOfSkipped(1), branchTaken(false), S
    if isMacro(I, AMT) .
  --- Case 3 of #ifndef: Skipping -> Skipping
  eq state(#ifndef I cr, (skip(true), nestLevelOfSkipped(N), branchTaken(B), S))
    = skip(true), nestLevelOfSkipped(N + 1), branchTaken(false), S .

  --- Case 1 of #elif: Not skipping -> Skipping
  eq state(#elif TS cr, (skip(false), nestLevelOfSkipped(0), S))
    = skip(true), nestLevelOfSkipped(1), S .
  --- Case 2 of #elif: Skipping -> Skipping
  ceq state(#elif TS cr, (macroTbl(AMT), skip(true), S))
    = macroTbl(AMT), skip(true), S
    if evalB(toCondExp(TS, AMT), AMT) = false .
  --- Case 3 of #elif: Skipping -> Not skipping
  ceq state(#elif TS cr, (macroTbl(AMT), skip(true), nestLevelOfSkipped(1),
        branchTaken(false), S))
    = macroTbl(AMT), skip(false), nestLevelOfSkipped(0), branchTaken(true), S
    if evalB(toCondExp(TS, AMT), AMT) = true .

  --- Case 1 of #else: Not skipping -> Skipping
  eq state(#else`cr, (skip(false), nestLevelOfSkipped(0), S))
    = skip(true), nestLevelOfSkipped(1), S .
  --- Case 2 of #else: Skipping -> Skipping
  eq state(#else`cr, (skip(true), nestLevelOfSkipped(N), branchTaken(true), S))
    = skip(true), nestLevelOfSkipped(N), branchTaken(true), S .
  --- Case 3 of #else: Skipping -> Not skipping
  eq state(#else`cr, (skip(true), nestLevelOfSkipped(1), branchTaken(false), S))
    = skip(false), nestLevelOfSkipped(0), branchTaken(true), S .

  --- Case 1 of #endif: Not skipping -> Not skipping
  eq state(#endif`cr, (skip(false), branchTaken(true), S))
    = skip(false), branchTaken(false), S .
  --- Case 2 of #endif: Skipping -> Skipping
  ceq state(#endif`cr, (skip(true), nestLevelOfSkipped(N), S))
    = skip(true), nestLevelOfSkipped(N - 1), S if N > 1 .
  --- Case 3 of #endif: Skipping -> Not Skipping
  eq state(#endif`cr, (skip(true), nestLevelOfSkipped(1), branchTaken(true), S))
    = skip(false), nestLevelOfSkipped(0), branchTaken(false), S .
endfm


fmod CPP-SEMANTICS is
  pr CPP-SYNTAX . pr HELPING-OPS . pr LINE-SEQ-SEMANTICS .
  pr INCLUDE-SEMANTICS . pr DEFINE-SEMANTICS . pr COND-DIR-SEMANTICS .
  op preprocess : CFilesMap String -> TokenSequence .
  op returnOutput : CppState -> TokenSequence .
  var F : String . var LS : LineSeq . var FM : CFilesMap .
  var O : TokenSequence . var S : CppState .
  eq preprocess([F : LS] FM, F)
    = returnOutput(state(LS, initialCppState([F : LS] FM))) .
  eq preprocess(FM, F) = nil [owise] .
  eq returnOutput(outputStream(O), S) = O .
endfm
